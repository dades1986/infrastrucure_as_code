**********Ad-hoc self scripts***
xxxx.sh

terraform :

*****configuration management ***** : 

1-install and manage software on existing infrastructure resources such as servers, databases, networking devices etc etc

2-maintain consistent and a standard stucture of code

3-easy to manage and upodate if needed

4-run multiple remote resource at once

5-ansible playbook or role can be checked into a version control repository

6-idempotent

Ansible
puppet
saltstack
Chef


*****server templating *****: 
1-create a custom image of a virtual machine or a container
2-images contain already all the required software and dependencies installed on them 
3-immutuable infrastructure: once the VM ora container is deployed,it's designed to remain unchanged
if there are changes to be made to the image, instead of updating the running instance
like the case of configuration management tools, we update the image and re-deploy a new instance
using the updated image


docker
packer
vagrant


*****provisioning tool *****:
1-deploy immutable infrastructure resources(VM, databses, vpc, subnet,security group, storage) servers, databases, network xomponents etc.
2-multiple providers : vendor agnostic : gpc, aws , azure,..


terraform
cloud formation

-------------------------------------

ON-pREMISE VsPHERE CLUSTER


-------------providers ------
1-how does terraform manage infrastructure on so many different kinds of platforms?----------
2-a provider helps Terraform manage third party platforms through their API, providers enable Terraform to manage cloud platforms like AWS,GCp, azure as wellas network infrastructure like 
BigIp
CloudFlare
DNS
Palo Alto
Infoblox

as well as moitoring and data managment tools like :
DataDog
Grafana
Auth0
WaveFront
Sumo Logic

as well database like 

InfluxDB
mongoDB
Mysql
PostgreSql

as well as version controll systems like:
Github
BitBucket
Gitlab

Terraform supports hundreds of such providers , and as result can work with almost every infrastructure plateform.

-----------HCL: HashiCorp Configuration language------------
1-simple declarative language
2-block of code : resources
3-tf extension

-------phases of terraform-----

main.tf (desired state)---->init,Plan , apply----->real world infrastructure (target state)


init: 
1-Terraform inializes the project
2-identify the providers to be used for the target env

plan :

1-terraform drafts a plan to get the target state

apply:
1-terraform makes the necessary changes required on the target env, to bring it to the desired state

A) -if for some reason the env was to shift, from the desired state, then the subsequent terraform apply will be bring it back to the desired state, by only fixing the missing component.

B) -Every object that terraform manages is called a resource : compute instance, database erver in the cloud or on a physical server on premise that terraform manages.

C) -Terraform manage yhe lifecycle of the resources from it's proviioning to configuration to decommissioning

D)-Terraform records the state of the infrastructure as it is seen in the reel world, and based on this, it can determine what actions to take when updating resources for a particular platform

E)- Terraform can ensure that the entire infrastructure is always in the defined state at all times

F)- the state is a blueprint(model cible) of the infrastructure deployed by Terraform(terraform.tfstate)

G)-Terraform can read attributes of existing infrastructure componenets by configuring datasources, this can later be used for configuring other resources within terraform

H)-Terraform can also import other resources outside of Terraform, that either created manually or by means of other IAC tools
and bring it under its control so that can  manage those resources going forward

-----------Terraform Cloud and Terraform Entreprise------
Terraform Cloud and Terraform Entreprise provide additinal features that allo simplified collaboration between teams managing infrastructure improved security and centralized UI to manage Terraform deployments
All these features make Terraform an excellent entreprise grade infrastucture provisionning tool

-----------------install terraform-------------
$ wget https://releases.hashicorp.com/terraform/1.8.2/terraform_1.8.2_linux_amd64.zip
$ unzip terraform_1.8.2_linux_amd64.zip
$ mv terraform  /usr/local/bin
$ terraform version

---------------------HCl Basics---------
<block> <parameters> {
key1 = value1
key2 = value2
}

-----$ mkdir /root/terraform-local-file
------$ cd /root/terraform-local-file
------$ touch local.tf
-------$vi local.tf
reource "local_file" "pet" {
filename = "/root/pets.txt"
content = "We love pets!"
}

<block name>, <"resource-type : local=provider, file=resource"> <reource name> {
arguments
}

so each resource type has its own expected arguments !!!!
 $ terraform init 
Initializing the backend...

Initializing provider plugins...
- Finding latest version of hashicorp/local...
╷
│ Error: Failed to query available provider packages
│
│ Could not retrieve the list of available versions for provider hashicorp/local: could not connect to
│ registry.terraform.io: failed to request discovery document: Get
│ "https://registry.terraform.io/.well-known/terraform.json": dial tcp: lookup registry.terraform.io on 127.0.0.53:53:
│ read udp 127.0.0.1:36355->127.0.0.53:53: i/o timeout


 sudo sh -c "echo nameserver 8.8.8.8 > /etc/resolv.conf"
vagrant@ubuntu-focal:~/hassan_terraform/state_directory$ terraform init

Initializing the backend...

Initializing provider plugins...
- Finding latest version of hashicorp/local...
- Installing hashicorp/local v2.5.1...
- Installed hashicorp/local v2.5.1 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
-------

sudo cat /root/pets.txt
cat: /root/pets.txt: No such file or directory

-------------
vagrant@ubuntu-focal:~/hassan_terraform/state_directory$ terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  # local_file.pet will be created
  + resource "local_file" "pet" {
      + content              = "We love pets!"
      + content_base64sha256 = (known after apply)
      + content_base64sha512 = (known after apply)
      + content_md5          = (known after apply)
      + content_sha1         = (known after apply)
      + content_sha256       = (known after apply)
      + content_sha512       = (known after apply)
      + directory_permission = "0777"
      + file_permission      = "0777"
      + filename             = "/root/pets.txt"
      + id                   = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if
you run "terraform apply" now.

------------------------------------
vagrant@ubuntu-focal:~/hassan_terraform/state_directory$ terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  # local_file.pet will be created
  + resource "local_file" "pet" {
      + content              = "We love pets!"
      + content_base64sha256 = (known after apply)
      + content_base64sha512 = (known after apply)
      + content_md5          = (known after apply)
      + content_sha1         = (known after apply)
      + content_sha256       = (known after apply)
      + content_sha512       = (known after apply)
      + directory_permission = "0777"
      + file_permission      = "0777"
      + filename             = "/root/pets.txt"
      + id                   = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value:yes
----------------------------------
 sudo terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  # local_file.pet will be created
  + resource "local_file" "pet" {
      + content              = "We love pets!"
      + content_base64sha256 = (known after apply)
      + content_base64sha512 = (known after apply)
      + content_md5          = (known after apply)
      + content_sha1         = (known after apply)
      + content_sha256       = (known after apply)
      + content_sha512       = (known after apply)
      + directory_permission = "0777"
      + file_permission      = "0777"
      + filename             = "/root/pets.txt"
      + id                   = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

local_file.pet: Creating...
local_file.pet: Creation complete after 0s [id=cba595b7d9f94ba1107a46f3f731912d95fb3d2c]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.
vagrant@ubuntu-focal:~/hassan_terraform/state_directory$



vagrant@ubuntu-focal:~/hassan_terraform/state_directory$ sudo cat /root/pets.txt
We love pets!

vagrant@ubuntu-focal:~/hassan_terraform/state_directory$ terraform show
# local_file.pet:
resource "local_file" "pet" {
    content              = "We love pets!"
    content_base64sha256 = "zUA5Ip/IeKlmTQIptlp90JdMGAd8YLStDXhpGq0Bp0c="
    content_base64sha512 = "tduqTz5S8Wa3O9Ab5+g0GcGL6kMjMh61vjFcMm5KkOO5TgViAC/kBOdvYHl9qky2K99+u80z0CfCs2ExsHbjGg=="
    content_md5          = "f510a471c5dc0bcd4759ad9dc81a516f"
    content_sha1         = "cba595b7d9f94ba1107a46f3f731912d95fb3d2c"
    content_sha256       = "cd4039229fc878a9664d0229b65a7dd0974c18077c60b4ad0d78691aad01a747"
    content_sha512       = "b5dbaa4f3e52f166b73bd01be7e83419c18bea4323321eb5be315c326e4a90e3b94e0562002fe404e76f60797daa4cb62bdf7ebbcd33d027c2b36131b076e31a"
    directory_permission = "0777"
    file_permission      = "0777"
    filename             = "/root/pets.txt"
    id                   = "cba595b7d9f94ba1107a46f3f731912d95fb3d2c"
}


-----------------------------provider 
provider                    local   aws         azure        ali_cloud 

resource_type               local_   aws_       azure_       ali_cloud

arguments

examples :
provider "alicloud" {
  access_key = "YOUR_ACCESS_KEY"
  secret_key = "YOUR_SECRET_KEY"
  region     = "YOUR_REGION"
}

resource "alicloud_vpc" "example_vpc" {
  cidr_block            = "10.0.0.0/16"
  vpc_name              = "example-vpc"
  description           = "Example VPC"
}

resource "alicloud_vswitch" "example_vswitch" {
  vpc_id                = alicloud_vpc.example_vpc.id
  cidr_block            = "10.0.1.0/24"
  vswitch_name          = "example-vswitch"
  description           = "Example VSwitch"
  availability_zone     = "YOUR_AVAILABILITY_ZONE"
}

-----------------

provider "aws" {
  region = "YOUR_REGION"
}

resource "aws_instance" "example" {
  ami           = "ami-12345678" # Specify your desired AMI ID
  instance_type = "t2.micro"
  tags = {
    Name = "example-instance"
  }
}
-----------------------
provider "azurerm" {
  features {}
}

resource "azurerm_resource_group" "example" {
  name     = "example-resources"
  location = "East US"
}

resource "azurerm_virtual_network" "example" {
  name                = "example-network"
  address_space       = ["10.0.0.0/16"]
  location            = azurerm_resource_group.example.location
  resource_group_name = azurerm_resource_group.example.name
}

resource "azurerm_subnet" "example" {
  name                 = "example-subnet"
  resource_group_name  = azurerm_resource_group.example.name
  virtual_network_name = azurerm_virtual_network.example.name
  address_prefixes     = ["10.0.1.0/24"]
}

resource "azurerm_network_interface" "example" {
  name                = "example-nic"
  location            = azurerm_resource_group.example.location
  resource_group_name = azurerm_resource_group.example.name

  ip_configuration {
    name                          = "internal"
    subnet_id                     = azurerm_subnet.example.id
    private_ip_address_allocation = "Dynamic"
  }
}

resource "azurerm_windows_virtual_machine" "example" {
  name                = "example-vm"
  res
-------------------

provider "google" {
  project = "your-project-id"
  region  = "us-central1"
}

resource "google_compute_instance" "example" {
  name         = "example-instance"
  machine_type = "n1-standard-1"
  zone         = "us-central1-a"

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
    network = "default"
    access_config {}
  }
}

----------------------------------------------Update or destroy a resource using terraform------------
update local.tf like 

reource "local_file" "pet" {
filename = "/root/pets.txt"
content = "We love pets!"
file_permission = "0700"
}

terraform plan ---->0777

vagrant@ubuntu-focal:~/hassan_terraform/state_directory$ sudo terraform plan
local_file.pet: Refreshing state... [id=cba595b7d9f94ba1107a46f3f731912d95fb3d2c]

No changes. Your infrastructure matches the configuration.

Terraform has compared your real infrastructure against your configuration and found no differences, so no changes are
needed.

vagrant@ubuntu-focal:~/hassan_terraform/state_directory$ vi local.tf
vagrant@ubuntu-focal:~/hassan_terraform/state_directory$ sudo terraform plan
local_file.pet: Refreshing state... [id=cba595b7d9f94ba1107a46f3f731912d95fb3d2c]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
-/+ destroy and then create replacement

Terraform will perform the following actions:

  # local_file.pet must be replaced
-/+ resource "local_file" "pet" {
      ~ content_base64sha256 = "zUA5Ip/IeKlmTQIptlp90JdMGAd8YLStDXhpGq0Bp0c=" -> (known after apply)
      ~ content_base64sha512 = "tduqTz5S8Wa3O9Ab5+g0GcGL6kMjMh61vjFcMm5KkOO5TgViAC/kBOdvYHl9qky2K99+u80z0CfCs2ExsHbjGg==" -> (known after apply)
      ~ content_md5          = "f510a471c5dc0bcd4759ad9dc81a516f" -> (known after apply)
      ~ content_sha1         = "cba595b7d9f94ba1107a46f3f731912d95fb3d2c" -> (known after apply)
      ~ content_sha256       = "cd4039229fc878a9664d0229b65a7dd0974c18077c60b4ad0d78691aad01a747" -> (known after apply)
      ~ content_sha512       = "b5dbaa4f3e52f166b73bd01be7e83419c18bea4323321eb5be315c326e4a90e3b94e0562002fe404e76f60797daa4cb62bdf7ebbcd33d027c2b36131b076e31a" -> (known after apply)
      ~ file_permission      = "0777" -> "0700" # forces replacement
      ~ id                   = "cba595b7d9f94ba1107a46f3f731912d95fb3d2c" -> (known after apply)
        # (3 unchanged attributes hidden)

-------terraform delete the old one , and replace with the new one with the new added argument : Imuutuable architecture


vagrant@ubuntu-focal:~/hassan_terraform/state_directory$ sudo terraform apply
local_file.pet: Refreshing state... [id=cba595b7d9f94ba1107a46f3f731912d95fb3d2c]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following
symbols:
-/+ destroy and then create replacement

Terraform will perform the following actions:

  # local_file.pet must be replaced
-/+ resource "local_file" "pet" {
      ~ content_base64sha256 = "zUA5Ip/IeKlmTQIptlp90JdMGAd8YLStDXhpGq0Bp0c=" -> (known after apply)
      ~ content_base64sha512 = "tduqTz5S8Wa3O9Ab5+g0GcGL6kMjMh61vjFcMm5KkOO5TgViAC/kBOdvYHl9qky2K99+u80z0CfCs2ExsHbjGg==" -> (known after apply)
      ~ content_md5          = "f510a471c5dc0bcd4759ad9dc81a516f" -> (known after apply)
      ~ content_sha1         = "cba595b7d9f94ba1107a46f3f731912d95fb3d2c" -> (known after apply)
      ~ content_sha256       = "cd4039229fc878a9664d0229b65a7dd0974c18077c60b4ad0d78691aad01a747" -> (known after apply)
      ~ content_sha512       = "b5dbaa4f3e52f166b73bd01be7e83419c18bea4323321eb5be315c326e4a90e3b94e0562002fe404e76f60797daa4cb62bdf7ebbcd33d027c2b36131b076e31a" -> (known after apply)
      ~ file_permission      = "0777" -> "0700" # forces replacement
      ~ id                   = "cba595b7d9f94ba1107a46f3f731912d95fb3d2c" -> (known after apply)
        # (3 unchanged attributes hidden)
    }

Plan: 1 to add, 0 to change, 1 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

local_file.pet: Destroying... [id=cba595b7d9f94ba1107a46f3f731912d95fb3d2c]
local_file.pet: Destruction complete after 0s
local_file.pet: Creating...
local_file.pet: Creation complete after 0s [id=cba595b7d9f94ba1107a46f3f731912d95fb3d2c]

vagrant@ubuntu-focal:~/hassan_terraform/state_directory$ terraform show
# local_file.pet:
resource "local_file" "pet" {
    content              = "We love pets!"
    content_base64sha256 = "zUA5Ip/IeKlmTQIptlp90JdMGAd8YLStDXhpGq0Bp0c="
    content_base64sha512 = "tduqTz5S8Wa3O9Ab5+g0GcGL6kMjMh61vjFcMm5KkOO5TgViAC/kBOdvYHl9qky2K99+u80z0CfCs2ExsHbjGg=="
    content_md5          = "f510a471c5dc0bcd4759ad9dc81a516f"
    content_sha1         = "cba595b7d9f94ba1107a46f3f731912d95fb3d2c"
    content_sha256       = "cd4039229fc878a9664d0229b65a7dd0974c18077c60b4ad0d78691aad01a747"
    content_sha512       = "b5dbaa4f3e52f166b73bd01be7e83419c18bea4323321eb5be315c326e4a90e3b94e0562002fe404e76f60797daa4cb62bdf7ebbcd33d027c2b36131b076e31a"
    directory_permission = "0777"
    file_permission      = "0700"
    filename             = "/root/pets.txt"
    id                   = "cba595b7d9f94ba1107a46f3f731912d95fb3d2c"
}
vagrant@ubuntu-focal:~/hassan_terraform/state_directory$

-------------terraform destroy-------
vagrant@ubuntu-focal:~/hassan_terraform/state_directory$ sudo terraform destroy
local_file.pet: Refreshing state... [id=cba595b7d9f94ba1107a46f3f731912d95fb3d2c]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following
symbols:
  - destroy

Terraform will perform the following actions:

  # local_file.pet will be destroyed
  - resource "local_file" "pet" {
      - content              = "We love pets!" -> null
      - content_base64sha256 = "zUA5Ip/IeKlmTQIptlp90JdMGAd8YLStDXhpGq0Bp0c=" -> null
      - content_base64sha512 = "tduqTz5S8Wa3O9Ab5+g0GcGL6kMjMh61vjFcMm5KkOO5TgViAC/kBOdvYHl9qky2K99+u80z0CfCs2ExsHbjGg==" -> null
      - content_md5          = "f510a471c5dc0bcd4759ad9dc81a516f" -> null
      - content_sha1         = "cba595b7d9f94ba1107a46f3f731912d95fb3d2c" -> null
      - content_sha256       = "cd4039229fc878a9664d0229b65a7dd0974c18077c60b4ad0d78691aad01a747" -> null
      - content_sha512       = "b5dbaa4f3e52f166b73bd01be7e83419c18bea4323321eb5be315c326e4a90e3b94e0562002fe404e76f60797daa4cb62bdf7ebbcd33d027c2b36131b076e31a" -> null
      - directory_permission = "0777" -> null
      - file_permission      = "0700" -> null
      - filename             = "/root/pets.txt" -> null
      - id                   = "cba595b7d9f94ba1107a46f3f731912d95fb3d2c" -> null
    }

Plan: 0 to add, 0 to change, 1 to destroy.

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

local_file.pet: Destroying... [id=cba595b7d9f94ba1107a46f3f731912d95fb3d2c]
local_file.pet: Destruction complete after 0s


-------------------cat local.tfstate------------------
 cat terraform.tfstate
{
  "version": 4,
  "terraform_version": "1.8.2",
  "serial": 10,
  "lineage": "b59ee795-6f07-c7da-cdda-c96906942b0a",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "local_file",
      "name": "pet",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "We love pets!",
            "content_base64": null,
            "content_base64sha256": "zUA5Ip/IeKlmTQIptlp90JdMGAd8YLStDXhpGq0Bp0c=",
            "content_base64sha512": "tduqTz5S8Wa3O9Ab5+g0GcGL6kMjMh61vjFcMm5KkOO5TgViAC/kBOdvYHl9qky2K99+u80z0CfCs2ExsHbjGg==",
            "content_md5": "f510a471c5dc0bcd4759ad9dc81a516f",
            "content_sha1": "cba595b7d9f94ba1107a46f3f731912d95fb3d2c",
            "content_sha256": "cd4039229fc878a9664d0229b65a7dd0974c18077c60b4ad0d78691aad01a747",
            "content_sha512": "b5dbaa4f3e52f166b73bd01be7e83419c18bea4323321eb5be315c326e4a90e3b94e0562002fe404e76f60797daa4cb62bdf7ebbcd33d027c2b36131b076e31a",
            "directory_permission": "0777",
            "file_permission": "0700",
            "filename": "/root/pets.txt",
            "id": "cba595b7d9f94ba1107a46f3f731912d95fb3d2c",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "sensitive_content"
              }
            ]
          ]
        }
      ]
    }
  ],
  "check_results": null
}
--------terraform providers : plugin-based architecture : infrastructure plugins in terraform registry at registry.terraform.io----
terraform init : plugins for cloud : aws, google, azure , local

official : aws, google, azure , local : official
partner : bigip, heroku, digitalocean : third partner
community : activedirectory, ucloud, netapp-gcp :individual contributors and Hashicorp community 

$ ls /root/terraform-local-file/.terraform plugins

name of the plugin : host_name/organizational_namespace/type
example : registery.terraform.io/hashicorp/local
by default hostname = registery.terraform.io

****************configuration directory***************
------naming convention --------:

A)===>one file

----$ ls /root/terraform-local-file
local.tf : 
reource "local_file" "pet" {
filename = "/root/pets.txt"
content = "We love pets!"
}

B)===>two files 
----$ ls /root/terraform-local-file
local.tf : 
reource "local_file" "pet" {
filename = "/root/pets.txt"
content = "We love pets!"
}

cat.tf :
reource "local_file" "cat" {
filename = "/root/cat.txt"
content = "My favorite pet is a cat!"
}

C)===>one filecontainig all configs

main.tf :
reource "local_file" "pet" {
filename = "/root/pets.txt"
content = "We love pets!"
}
reource "local_file" "cat" {
filename = "/root/cat.txt"
content = "My favorite pet is a cat!"
}

D)===>many configuration files
main.tf : main configuration file containing resource definition
variables.tf :contains variable declaration
outputs.tf : contains outputs from resources
provider.tf : contain provider definition

******************multiple providers ******************
*****Random resource to create a random resource *******
The resources available in random provider are
Resources

random_id
random_integer
random_password
random_pet
random_shuffle
random_string
random_uuid
**************main.tf****************
resource "local_file" "pet" {
filename = "/root/pets.txt"
content = "We love pets!"
}

resource "random_pet" "my-pet" {
prefix = "Mrs"
separator = "."
length = "5"
}

***************************inputs variables****************
argument               value
filename              "/root/pets.txt"   
content                "We love pets" 
prefix                 "Mrs"
separator                "." 
length                 "1"

1-hardcoded value is not a goood idea  cause this limits the reusability of the code which defetas the purpose of using IAC
2-we want to be ure that code will be reused again and again to deploy resources "BASED ON" a set of input variables that can be provided during the "EXECUTION"

*****variables.tf***********

variable "filename"  {
 default  = "/root/pets.txt"
}
variable "content"{
 default  = "We love pets"
}
variable "prefix"  {
 default  =  "Mrs"
}
variable "separator"{
 default  =   "." 
}
variable "length "{
 default  =  "1"
}

**************main.tf****************
resource "local_file" "pet" {
filename = var.filename
content = var.content
}

resource "random_pet" "my-pet" {
prefix = var.prefix
separator = var.separator
length =var.length
}

*****block variables.tf***********

variable "filename"  {
 default  = "/root/pets.txt"
 type = string
 description = "the path of the local file"   
}
variable "content"{
 default  = "We love pets"
 type = string
 description =  "the content of the file"
}
variable "prefix"  {
 default  =  "Mrs"
 type = string
 description = "the preficx to be set" 
}
variable "separator"{
 default  =   "." 
 type = string
 description =  "the seprator to be set"
}
variable "length "{
 default  =  "1"
 type = string
 description =  "length to be set"
}

types :

type           Example                                                                                       main.tf
string         "/root/pets.txt"                                                                               var.variable_name
number         1                                                                                               var.variable_name
bool           true                                                                                              var.variable_name
any            default value                                                                                      var.variable_name
list        list(string)   ["cat",  "dog"] list(number)[1,2,3]                                                     var.prefix[0]             

map           map(string)  pet1 = cat      map(number) dogs=3                                                    var.variable_name["pet1"]
                           pet2= dog                   cats=1

set        like list with no duplicate element
object     complexe data structure (like class java)
tuple       like list of different type : tuple([String, number, bool])


 cat variables.tf 
variable "name" {
     type = string
     default = "Mark"
  
}
variable "number" {
     type = bool
     default = true
  
}
variable "distance" {
     type = number
     default = 5
  
}
variable "jedi" {
     type = map
     default = {
     filename = "/root/first-jedi"
     content = "phanius"
     }
  
}

variable "gender" {
     type = list(string)
     default = ["Male", "Female"]
}
variable "hard_drive" {
     type = map
     default = {
          slow = "HHD"
          fast = "SSD"
     }
}
variable "users" {
     type = set(string)
     default = ["tom", "jerry", "pluto", "daffy", "donald", "jerry", "chip", "dale"]

  
}


--------------------------------suite variables : default is optional-------------
variable "filename"  {
 default  = "/root/pets.txt"
}
variable "content"{
 default  = "We love pets"
}
variable "prefix"  {
 default  =  "Mrs"
}
variable "separator"{
 default  =   "." 
}
variable "length "{
 default  =  "1"
}

if we delete argument "default" like this :

variable "filename"  {
}
variable "content"{
}
variable "prefix"  {
}
variable "separator"{
}
variable "length "{
}

when we execute terraform apply , we will be prompted to enter values for each variable used an interactive mode

$>terraform apply

var.content
  Enter a value: We love Pets!
var.filename
  Enter a value: /root/pets.txt
var.prefix
  Enter a value: Mrs
var.separator
  Enter a value: .
var.length
  Enter a value: 1

if we dont supply on interactive mode , then we use terraform command -var option like :

$$ terraform apply -var "filename=/root/pets.txt" -var "content=We love pets!" -var "prefix=Mrs" -var "separator=." -var "length=2"

*******************ENVIRMENT VARIABLES**************
$$ export TF_VAR_filename="/root/pets.txt"
$$ export TF_VAR_content="We love pets!"
$$ export TF_VAR_prefix="Mrs"
$$ export TF_VAR_separator=."
$$ export TF_VAR_length=2"
$$ terraform apply

**********when dealing with a lot of variables use "variable definition files .tfvars or .tfvars.json"
terraform.tfvars

$$ filename = "/root/pets.txt"
$$ content = "We love pets!"
$$ prefix = "Mrs"
$$ separator = "."
$$ length = "2"

A)-all files terraform.tfvars or terraform.tfvars.json or *.auto.tfvars or *.auto.tfvars.json will be automatically loaded by teraform
B)- if you use any other filename such as variable.tfvars for example, you will have to parse it along with a command line flag called "-var-file" like this :
$$  terraform apply -var-file variable.tfvars

**********************variable definition precedence************

main.tf
resource local_file pet {
filename= var.filename
}

variables.tf
variable filename {
type = string
}

$ export TF_VAR_filename="/root/cats.txt"

terraform.tfvars
filename = "root/pets.txt"

variable.auto.tfvars
filename = "root/mypet.txt"

$ terraform apply -var "filename=/root/best-pet.txt"

order                      option
1                         Env variables
2                         terraform.tfvars
3                         *.auto.tfvars(alphbetical order)
4                         -var or -var-file (command line flags)


drwxr-xr-x 3 root root 4096 May  4 16:31 ./
drwxr-xr-x 3 root root 4096 May  4 16:28 ../
drwxr-xr-x 3 root root 4096 May  4 16:31 .terraform/
-rw-r--r-- 1 root root 1153 May  4 16:31 .terraform.lock.hcl
-rw-r--r-- 1 root root   33 May  2 16:30 basket.auto.tfvars  --->deuxieme car ordre alphabetique basket << throw
-rw-r--r-- 1 root root   79 May  2 16:30 main.tf
-rw-r--r-- 1 root root   31 May  2 16:30 terraform.tfvars       ----->premier
-rw-r--r-- 1 root root   31 May  2 16:30 throw.auto.tfvars ------->3eme 


***********************resourceattribute  : link resource to another resource************ generated after "terraform apply" 

**************main.tf****************
resource "local_file" "pet" {
filename = var.filename
content = var.content
}

resource "random_pet" "my-pet" {
prefix = var.prefix
separator = var.separator
length =var.length
}

$ terraform apply

like : random_pet.my-pet: creation complete after 0 s [id=Mr.bull] ==>we can use this attribute like id :

**************main.tf****************
resource "local_file" "pet" {
filename = var.filename
content = "My favorite pet is ${randem_pet.my-pet.id}  <<<<<<<<<<reference  expression and interpolation   ${resource_type.resource_name.attribute}
}

resource "random_pet" "my-pet" {
prefix = var.prefix
separator = var.separator
length =var.length
}

*********************resource dependencies*************
reference attribute ==> output of random_pet resource is input of local_file resource ===<terraform create firtsly random_pet resource then create local_file_resource ===>in destroy , destroy terraform delete in reverse order destroy first local_file resource then random pet resource.===>implicit dependancy ==>terraform figure it out by itself

Explicit dependancy :

**************main.tf****************
resource "local_file" "pet" {
filename = var.filename
content ="My favorite pet is Mr.cat"
depends_on = [
random_pet.my_pet
]
}

resource "random_pet" "my-pet" {
prefix = var.prefix
separator = var.separator
length =var.length
}



